{"version":3,"sources":["components/logScript.js","components/Forms.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["logScript","base","argument","x","Math","log","counter","c","d","abs","recovery","Object","is","NaN","console","xText","slice","indexOf","parseFloat","Forms","useState","bas","setBas","arg","setArg","screen","setScreen","className","onClick","len","length","alert","App","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.225fb314.chunk.js","sourcesContent":["const logScript = (base, argument) => {\n\n  let x = - (Math.log(1 / argument) / Math.log(base));\n\n  let counter = 1;\n  let xn;\n  let err = 0.0000000000001;\n  let c = base;\n  let d = Math.abs(c - argument);\n  let recovery = 1;\n\n    if (base < 0 || argument < 0) {\n      return `Error`;      \n    } else if (base - argument === 0) {\n      x = 1;\n    } else {\n      while (d > err) {\n        xn = x - ((base ** x) - argument) / ((base ** x) * Math.log(base));x = xn;\n        c = base ** x;\n        d = Math.abs(c - argument);\n\n        if (counter > 5000) {\n          break\n        }\n\n        if (Object.is(x, NaN) === true) {\n          x = recovery++;\n          recovery ++;\n          d = 1;\n\n          if (recovery < 13) {\n            console.log('Error');\n            break\n          }\n        }\n        counter++;\n      }\n    }\n\n  let xText = `${x}`;\n\n  xText = xText.slice(0, xText.indexOf('.') + 5);\n  \n  return parseFloat(xText);\n}\n\nexport default logScript\n","import { useState } from 'react'\nimport logScript from './logScript.js'\nimport './Styles.css'\n// import BackspaceIcon from '@mui/icons-material/Backspace';\n\nconst Forms = () => {\n\n    const [bas, setBas] = useState(10)\n\n    const [arg, setArg] = useState(100)\n\n    const [screen, setScreen] = useState('')\n    \n    console.log(logScript(bas, arg), bas/arg);\n\n    const del = () => {\n        const len = screen.length;\n        setScreen(screen.slice(0, len - 1));\n    }\n\n    return (\n\n        <div className='all'>\n\n            <div className='superd'>\n                <div className='showup'>\n                    log <sub>({bas})</sub> {arg} =\n                    {logScript(bas, arg)}\n                </div>\n\n                <h1 className='show'>{screen}</h1>\n\n                <div className='row scr1'>\n                    <button className='num' onClick={() => setScreen('')}>C</button>\n\n                    <button className='num' onClick={() => {\n                        setBas(parseFloat(screen));\n                        setScreen('');\n                        }}>LOG</button>\n\n                    <button className='num' onClick={del}>\n                        <span className=\"material-icons-outlined\">backspace</span>\n                    </button>\n                </div>\n\n                <div className='row'>\n                    <button className='num' onClick={() => {\n                        if (screen.length > 7) {\n                            alert('it only support 8 characters in the screen')\n                        } else {\n                            setScreen(`${screen}7`);\n                        }}\n                    }>7</button>\n\n                    <button className='num' onClick={() => {\n                        if (screen.length > 7) {\n                            alert('it only support 8 characters in the screen')\n                        } else {\n                            setScreen(`${screen}8`)\n                        }}\n                    }>8</button>\n\n                    <button className='num' onClick={() => {\n                        if (screen.length > 7) {\n                            alert('it only support 8 characters in the screen')\n                        } else {\n                            setScreen(`${screen}9`)}}\n                    }>9</button>\n                </div>\n\n                <div className='row'>\n                    <button className='num' onClick={() => {\n                        if (screen.length > 7) {\n                            alert('it only support 8 characters in the screen')\n                        } else {\n                            setScreen(`${screen}4`)}}\n                    }>4</button>\n\n                    <button className='num' onClick={() => {\n                        if (screen.length > 7) {\n                            alert('it only support 8 characters in the screen')\n                        } else {\n                            setScreen(`${screen}5`)}}\n                    }>5</button>\n\n                    <button className='num' onClick={() => {\n                        if (screen.length > 7) {\n                            alert('it only support 8 characters in the screen')\n                        } else {\n                        setScreen(`${screen}6`)}}\n                    }>6</button>\n                </div>\n\n                <div className='row'>\n                    <button className='num' onClick={() => {\n                        if (screen.length > 7) {\n                            alert('it only support 8 characters in the screen')\n                        } else {\n                            setScreen(`${screen}1`)}}\n                    }>1</button>\n\n                    <button className='num' onClick={() => {\n                        if (screen.length > 7) {\n                            alert('it only support 8 characters in the screen')\n                        } else {\n                            setScreen(`${screen}2`)}}\n                    }>2</button>\n\n                    <button className='num' onClick={() => {\n                        if (screen.length > 7) {\n                            alert('it only support 8 characters in the screen')\n                        } else {\n                            setScreen(`${screen}3`)}}\n                    }>3</button>\n                </div>\n\n                <div className='row'>\n                    <button className='num extra1' onClick={() => {\n                        if (screen.length > 7) {\n                            alert('it only support 8 characters in the screen')\n                        } else {\n                            setScreen(`${screen}.`)}}\n                    }>.</button>\n\n                    <button className='num' onClick={() => {\n                        if (screen.length > 7) {\n                            alert('it only support 8 characters in the screen')\n                        } else {\n                            setScreen(`${screen}0`)}}\n                    }>0</button>\n\n                    <button onClick={() => {\n                        setArg(parseFloat(screen));\n                        setScreen('');\n                        }} className='num extra2'>=</button>\n                </div>\n                \n            </div>\n\n        </div>\n    )\n}\n\nexport default Forms\n","import React from 'react'\nimport Forms from './components/Forms'\n\nconst App = () => {\n  return (\n    <>\n      <Forms />\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}